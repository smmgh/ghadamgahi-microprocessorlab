;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : task1
;Version : 1
;Date    : 12/13/2020
;Author  : smmgh
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;static unsigned  int time_count ;//.5sec counter
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F 
; 0000 0020      // 12 MHz/8 = 1500 kHz, which has a period of 1/1500 kHz = 0.66 µs
; 0000 0021     //  225 * 0.66 µs = 150 µs
; 0000 0022     //  3333 * 150 µs = 500 ms
; 0000 0023     //  256 – 225 = 31
; 0000 0024 
; 0000 0025     TCNT0 = 31;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0026        ++time_count; /*increment .5 second counter*/
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027     if (time_count == 3333)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0028   {
; 0000 0029         PORTC.0 = (PORTC.0 ^ 1); /*complement port bit to blink LED*/
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002A         time_count = 0; /*reset time counter for next .5 second*/
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002B    }
; 0000 002C 
; 0000 002D 
; 0000 002E 
; 0000 002F }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;void main(void)
; 0000 0032 {
;PCODE: $0000002A VOL: 0
; 0000 0033 
; 0000 0034     DDRC = 0x01; /*set lsb for output*/
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0035 
; 0000 0036     /*set timer 0 prescaler to clk/8*/
; 0000 0037     TCCR0=0x02;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0038     TCNT0=31;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0039 
; 0000 003A 
; 0000 003B     /* unmask Timer 0 overflow interrupt*/
; 0000 003C     TIMSK=0x01;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003D 
; 0000 003E     /* enable interrupts */
; 0000 003F     #asm("sei")
;PCODE: $00000033 VOL: 0
	sei
;PCODE: $00000034 VOL: 0
; 0000 0040     while(1)
;PCODE: $00000035 VOL: 0
; 0000 0041     {
; 0000 0042 
; 0000 0043       }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0044 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
